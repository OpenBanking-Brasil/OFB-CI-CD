name: Jira Task Creation

on:
  workflow_call:
    secrets:
      JIRA_URL:
        required: true
      JIRA_USER:
        required: true
      JIRA_API_TOKEN:
        required: true
      JIRA_PROJECT:
        required: true
    inputs:
      PR_TITLE:
        required: true
        type: string
      PR_URL:
        required: true
        type: string
      PR_AUTHOR:
        required: true
        type: string
permissions:
  actions: write
  contents: write
  issues: write
  pull-requests: write

jobs:
  jira:
    runs-on: ubuntu-latest
    steps:
      - name: Validar Secrets Necess√°rias
        run: |
          if [[ -z "${{ secrets.JIRA_URL }}" || -z "${{ secrets.JIRA_USER }}" || -z "${{ secrets.JIRA_API_TOKEN }}" || -z "${{ secrets.JIRA_PROJECT }}" ]]; then
            echo "‚ùå Uma ou mais secrets obrigat√≥rias n√£o est√£o definidas."
            exit 1
          fi
          echo "‚úÖ Todas as secrets obrigat√≥rias est√£o definidas."

      - name: Baixar Relat√≥rios
        uses: actions/download-artifact@v4
        with:
          path: reports

      - name: Listar arquivos baixados
        run: |
          echo "üìÇ Arquivos baixados:"
          ls -R reports

      - name: Criar Task no Jira
        id: create-jira-task
        env:
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USER: ${{ secrets.JIRA_USER }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_PROJECT: ${{ secrets.JIRA_PROJECT }}
          JIRA_ISSUE_TYPE: "Proposta"
        run: |
          DESCRIPTION="Revis√£o do PR: ${{ inputs.PR_TITLE }}. Link do PR: ${{ inputs.PR_URL }} Criado por: ${{ inputs.PR_AUTHOR }}"
          ISSUE_PAYLOAD=$(jq -n \
            --arg project "$JIRA_PROJECT" \
            --arg summary "Revis√£o do PR: ${{ inputs.PR_TITLE }}" \
            --arg description "$DESCRIPTION" \
            --arg issuetype "$JIRA_ISSUE_TYPE" \
            '{ fields: { project: { key: $project }, summary: $summary, description: $description, issuetype: { name: $issuetype } } }')

          RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "$ISSUE_PAYLOAD" "$JIRA_URL/rest/api/2/issue/" -w "\nHTTP_STATUS:%{http_code}")

          echo "üìÑ Resposta do Jira: $RESPONSE"

          HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | awk -F':' '{print $2}')
          ISSUE_ID=$(echo "$RESPONSE" | jq -r '.id')
          ISSUE_KEY=$(echo "$RESPONSE" | jq -r '.key')

          if [[ "$HTTP_STATUS" -ne 200 && "$HTTP_STATUS" -ne 201 ]]; then
            echo "‚ùå Erro ao criar issue no Jira! C√≥digo HTTP: $HTTP_STATUS"
            exit 1
          fi

          echo "JIRA_ISSUE_ID=$ISSUE_ID" >> $GITHUB_ENV
          echo "JIRA_ISSUE_KEY=$ISSUE_KEY" >> $GITHUB_ENV
          echo "‚úÖ Tarefa Jira criada: $ISSUE_KEY (ID: $ISSUE_ID)"

      - name: Anexar Relat√≥rios √† Task do Jira
        run: |
          echo "üîç Listando arquivos antes do upload..."
          ls -lah reports/ || echo "‚ö†Ô∏è Pasta 'reports/' n√£o encontrada!"

          JIRA_ISSUE_ID=${{ env.JIRA_ISSUE_ID }}
          echo "üìå ID da Task do Jira: $JIRA_ISSUE_ID"

          for FILE in reports/spectral_report/spectral_report.txt reports/vale_report/vale_report.txt reports/pb33f_report/pb33f_report.txt reports/report/report.html; do
            if [[ -f "$FILE" ]]; then
              echo "üìé Tentando anexar arquivo: $FILE"
              RESPONSE=$(curl -X POST -H "X-Atlassian-Token: no-check" \
                -H "Content-Type: multipart/form-data" \
                -u "$JIRA_USER:$JIRA_API_TOKEN" \
                -F "file=@$FILE" "$JIRA_URL/rest/api/2/issue/$JIRA_ISSUE_ID/attachments" \
                -w "\nHTTP_STATUS:%{http_code}")

              echo "üìÑ Resposta do Jira: $RESPONSE"
              HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | awk -F':' '{print $2}')
              if [[ "$HTTP_STATUS" -ne 200 && "$HTTP_STATUS" -ne 201 ]]; then
                echo "‚ùå Erro no upload do arquivo: $FILE. C√≥digo HTTP: $HTTP_STATUS"
                exit 1
              fi
            else
              echo "‚ö†Ô∏è Arquivo n√£o encontrado: $FILE"
            fi
          done

      - name: Mudar status da Task para "Em Andamento"
        run: |
          TRANSITION_PAYLOAD='{"transition": {"id": "10074"}}'
          RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" \
            -u "$JIRA_USER:$JIRA_API_TOKEN" \
            --data "$TRANSITION_PAYLOAD" \
            "$JIRA_URL/rest/api/2/issue/$JIRA_ISSUE_ID/transitions" -w "\nHTTP_STATUS:%{http_code}")

          echo "üìÑ Resposta do Jira: $RESPONSE"
          HTTP_STATUS=$(echo "$RESPONSE" | grep "HTTP_STATUS:" | awk -F':' '{print $2}')
          if [[ "$HTTP_STATUS" -ne 200 && "$HTTP_STATUS" -ne 204 ]]; then
            echo "‚ùå Erro ao mudar status da issue no Jira! C√≥digo HTTP: $HTTP_STATUS"
            exit 1
          fi
          echo "‚úÖ Status da Task atualizado para 'Em Andamento'."
